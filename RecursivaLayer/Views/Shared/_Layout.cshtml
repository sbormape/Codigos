<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" ng-app="myApp">
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>@ViewBag.Title</title>
    <link href="~/Content/bootstrap-3.1.1/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-3.1.1/bootstrap-theme.min.css" rel="stylesheet" />



    <script src="~/Scripts/jquery-2.1.0/jquery-2.1.0.min.js"></script>
    <script src="~/Scripts/bootstrap-3.1.1/bootstrap.min.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap-3.1.1/bootstrap-filestyle.min.js"> </script>
    <script src="~/Scripts/angular-1.2.16/angular.min.js"></script>
    <script src="~/Scripts/angular-1.2.16/i18n/angular-locale_es-ar.js"></script>
    
    <script src="~/Scripts/angular-1.2.16/utils/checklist-model.js"></script>


	<script src="~/Content/components/ng-table/ng-table.js"></script>
    <script src="~/Content/components/angular-moment/angular-moment.min.js"></script>
    <script src="~/Content/components/ui-bootstrap-0.12.1.min.js"></script>
    <link rel="stylesheet" href="~/Content/components/ng-table/ng-table.css" />
    <script src="~/Scripts/utilities/bootbox.min.js"></script>
    

    <script>
        var pathBase = "@Url.Content("~/")";
        var uniqueItems = function (data, key) {
            var result = [];
            for (var i = 0; i < data.length; i++) {
                var value = data[i][key];
                if (result.indexOf(value) == -1) {
                    result.push(value);
                }
            }
            return result;
        };
        var myApp = angular.module('myApp', ["checklist-model", 'ngTable', 'ui.bootstrap', 'angularMoment']).factory('errorHttpInterceptor', ['$q', function ($q) {
            return {
                response: function (response) {

                    if (response.data.error) {
                        return handleError(response);
                    }
                    else {
                        //$("#errorLog").empty();
                    }
                    return response;
                },
                responseError: function responseError(rejection) {

                    aux = $("#errorLog");
                    $(aux).empty();
                    $(aux).addClass('alert alert-danger');
                    if (rejection.status == 401) {
                        $(aux).append("<p>Se vencio la sesión debe loguearse nuevamente <a href='" + pathBase + "'>aqui</a> ");
                    }
                    else {


                        $(aux).append("<p>Fallo la carga de: " + rejection.config.url);
                        $(aux).append("<p>Status code: " + rejection.status);
                        $(aux).append("<p> status text: " + rejection.statusText);
                        $(aux).append("<p>method: " + rejection.config.method);
                        if (rejection.status == 500) {
                            $(aux).append("<p>ExceptionMessage: " + rejection.data.ExceptionMessage);
                            $(aux).append("<p>ExceptionType: " + rejection.data.ExceptionType);
                        }
                    }
                    console.error(rejection);
                    return $q.reject(rejection);
                }
            };
        }])
    .config(['$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push('errorHttpInterceptor');
    }]).directive('loading', ['$http', function ($http) {
        return {
            link: function (scope, elm, attrs) {
                scope.isLoading = function () {
                    return $http.pendingRequests.length > 0;
                };
                scope.$watch(scope.isLoading, function (v) {
                    if (v) {
                        $("#waitingModal").modal("show");
                    } else {
                        $("#waitingModal").modal("hide");
                    }
                });
            }
        };
    }]).config(function (datepickerConfig, datepickerPopupConfig) {
        datepickerConfig.showWeeks = false;
        datepickerPopupConfig.showButtonBar = false;
        datepickerPopupConfig.toggleWeeksText = null;
        datepickerPopupConfig.datepickerPopup = "mediumDate";
    }).constant('angularMomentConfig', {
        preprocess: 'utc' // optional

    }).filter('sumByKey', function () {
        return function (data, key) {
            if (typeof (data) === 'undefined' || typeof (key) === 'undefined') {
                return 0;
            }
            var sum = 0;
            var keys = key.split('.');
            for (var i = data.length - 1; i >= 0; i--) {
                var aux = data[i];
                for (var j = 0; j < keys.length; j++) {
                    aux = aux[keys[j]];
                }
                if (aux != null) {
                    sum += parseFloat(aux);
                }
            }

            return sum;
        };
    }).filter('groupBy',
            function () {
                return function (collection, key) {
                    if (collection === null) return;
                    return uniqueItems(collection, key);
                };
    }).controller('LayoutController', function ($scope) {

    });

        var DatepickerCtrl = function ($scope, $timeout) {
        $scope.open = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.opened = !$scope.opened;
        };
    };

    $.download = function (url, data, method) {
        if (url && data) {
            //convert the data object into input HTML fields
            var inputs = '';
            var convertToInput = function (key, keyStr, obj) {
                if (typeof obj === 'undefined') {
                    return;
                } else if (typeof obj === "object") {
                    for (var innerKey in obj) {
                        if (obj.hasOwnProperty(innerKey)) {
                            var innerKeyStr = '';
                            if (keyStr === '') {
                                innerKeyStr = innerKey.toString();
                            } else {
                                innerKeyStr = keyStr + "[" + innerKey.toString() + "]";
                            }
                            convertToInput(innerKey, innerKeyStr, obj[innerKey]);
                        }
                    }
                    return;
                } else if ($.isArray(obj)) {
                    obj.forEach(function (item) {
                        convertToInput(key, keyStr + "[]", item);
                    });
                    return;
                }

                inputs += "<input type='hidden' name='" + keyStr + "' value='" + obj + "' />";
            };
            convertToInput(null, '', data);
            console.log(inputs);
            //send request
            jQuery('<form action="' + url + '" method="' + (method || 'post') + '">' + inputs + '</form>').appendTo('body').submit().remove();
        };
    };
    </script>


 


    <style>
        .imgLoading {
            width: 15px;
            height: 15px !important;
            background-image: url(~/Images/loading-icon.gif);
            background-repeat: no-repeat;
            padding-right: 20px;
            color: green;
            size: 10px;
        }

        .datepicker {
            z-index: 1151 !important;
        }

        .recuired {
            color: red;
        }

        div.header {
            height: 52px;
            line-height: 50px;
            font-size: 16pt;
            color: white;
            font-family: Arial;
            font-weight: bold;
            background-color: #2E6DA4;
            padding-left: 10px;
        }

        /* .form-control {
            margin-top: 4px;
        }*/

        tbody tr td {
            padding: 2px;
            font-size: 9pt;
        }

        table thead th {
            font-size: 12px;
            text-align: center;
        }

    </style>
   
</head>
<body>
    <div class="row-fluid">
        <div class="span12 header">Rercusiva</div>
    </div>

    <div class="container-fluid">
        <div class="row-fluid">
            @RenderBody()
        </div>
    </div>
</body>
</html>
